#!/usr/bin/env python3
import os
import sys

def letter_to_index(letter):
    """
    Convert Excel-style column letters to zero-based indices.
    """
    letter = letter.upper()
    idx = 0
    for char in letter:
        if 'A' <= char <= 'Z':
            idx = idx * 26 + (ord(char) - ord('A') + 1)
        else:
            raise ValueError(f"Invalid column letter: {letter}")
    return idx - 1

# === Configuration ===
START_BATCH     = 1    # Starting batch number (inclusive)
END_BATCH       = 5    # Ending batch number (inclusive)
SM_PROT         = "T"  # e.g. "E" for EGF, "T" for TGFa, etc.

USER_NAME       = "(Your username)"     #Input ur SSH/JHPCE username

# Base directory where the code will create a single batch folder
SCRIPT_DIR      = r"C:\path\to\your\output\directory"
SH_PATH         = "/fastscratch/myscratch/{user_name}/alphafold/"  # On-cluster path to wrappers

FASTA_DIR_TEMPLATE = "/fastscratch/myscratch/{user_name}/alphafold/fasta_{sm_prot}batch{batch}"
OUT_DIR_TEMPLATE   = "/fastscratch/myscratch/{user_name}/alphafold/outputs_{sm_prot}batch{batch}"

DATA_DIR = "/legacy/alphafold/data"
DATE     = "2020-05-14"
N_CPU    = 8

# Create one master batch folder inside SCRIPT_DIR
master_folder = os.path.join(SCRIPT_DIR, f"{SM_PROT}Batch")
os.makedirs(master_folder, exist_ok=True)

# === Shell wrapper template ===
SH_TEMPLATE = """#!/bin/bash

# Define paths and parameters
FASTA_DIR=\"{fasta_dir}\"
OUT_DIR=\"{out_dir}\"
DATA_DIR=\"{data_dir}\"
DATE=\"{date}\"
N_CPU={n_cpu}

# Loop through all FASTA files and run AlphaFold-Multimer
for fasta in "\$FASTA_DIR"/*.fasta; do
    name=$(basename "\$fasta" .fasta)
    echo "Running prediction for $name"
    run_alphafold.sh \\
        -d "\$DATA_DIR" \\
        -o "\$OUT_DIR/${{name}}_output" \\
        -f "\$fasta" \\
        -t "\$DATE" \\
        -n "\$N_CPU" \\
        -m multimer
done
"""

# === Slurm job template ===
SLURM_TEMPLATE = """#!/bin/bash
#SBATCH --job-name={sm_prot}batch{batch}
#SBATCH --output={sm_prot}batch{batch}_%j.out
#SBATCH --error={sm_prot}batch{batch}_%j.err
#SBATCH --mail-type=END,FAIL
#SBATCH --mail-user=YOUR_EMAIL@domain.com
#SBATCH --ntasks=1
#SBATCH --cpus-per-task={n_cpu}
#SBATCH --mem=64G
#SBATCH --gres=gpu:1
#SBATCH --partition=gpu
#SBATCH --time=72:00:00

module load alphafold/2.3.1

bash "{sh_path}run_{sm_prot}batch{batch}_wrapper.sh"
"""

def generate_sh(batch_number: int):
    batch_str = f"{batch_number:02d}"
    # Compute paths
    fasta_dir = FASTA_DIR_TEMPLATE.format(sm_prot=SM_PROT, batch=batch_str)
    out_dir   = OUT_DIR_TEMPLATE.format(sm_prot=SM_PROT, batch=batch_str)
    content   = SH_TEMPLATE.format(
        fasta_dir=fasta_dir,
        out_dir=out_dir,
        data_dir=DATA_DIR,
        date=DATE,
        n_cpu=N_CPU
    )
    filename  = f"run_{SM_PROT}batch{batch_str}_wrapper.sh"
    path      = os.path.join(master_folder, filename)
    with open(path, 'w', newline='\n') as f:
        f.write(content)
    os.chmod(path, 0o755)
    print(f"Generated wrapper: {path}")

def generate_slurm(batch_number: int):
    batch_str = f"{batch_number:02d}"
    content   = SLURM_TEMPLATE.format(
        sm_prot=SM_PROT,
        batch=batch_str,
        n_cpu=N_CPU,
        sh_path=SH_PATH
    )
    filename  = f"{SM_PROT}batch{batch_str}.slurm"
    path      = os.path.join(master_folder, filename)
    with open(path, 'w', newline='\n') as f:
        f.write(content)
    os.chmod(path, 0o644)
    print(f"Generated Slurm: {path}")

def main():
    if START_BATCH > END_BATCH:
        sys.exit("ERROR: START_BATCH must be <= END_BATCH")
    for num in range(START_BATCH, END_BATCH + 1):
        generate_sh(num)
        generate_slurm(num)

if __name__ == "__main__":
    main()

